{"version":3,"sources":["src/index.js"],"names":["detail","length","width","lt","radius","lb","rt","rb","app","document","getElementById","heightInput","widthInput","rightAngleInput","rotateZ","fixedHeight","maxElementSize","rotateSwitch","windowWidth","window","innerWidth","elementWidth","elementHeight","xPosition","yPosition","svgns","svg","getElementsByTagName","rotate","positionCheck","updateSvgDimentions","style","height","updateData","Number","isNaN","innerHTML","rect","createElementNS","pathDataValue","generatePathData","setAttributeNS","appendChild","arcParameter","rx","ry","xAxisRotation","largeArcFlag","sweepFlag","x","y","join","data","push","addEventListener","e","target","value"],"mappings":"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","file":"src.00ce03f5.js","sourceRoot":"..","sourcesContent":["import \"./styles.css\";\r\n\r\nlet detail = {\r\n  length: 350,\r\n  width: 250,\r\n  lt: { radius: 0 },\r\n  lb: { radius: 0 },\r\n  rt: { radius: 0 },\r\n  rb: { radius: 0 },\r\n};\r\n\r\n{\r\n  const app = document.getElementById(\"app\");\r\n  const heightInput = document.getElementById(\"heightInput\");\r\n  const widthInput = document.getElementById(\"widthInput\");\r\n  const rightAngleInput = document.getElementById(\"rightAngleInput\");\r\n  const rotateZ = document.getElementById(\"rotateZ\");\r\n\r\n  //your code here....\r\n  const fixedHeight = 820;\r\n  const maxElementSize = 800;\r\n\r\n  let rotateSwitch = true;\r\n  let windowWidth = window.innerWidth;\r\n  let elementWidth = detail.length;\r\n  let elementHeight = detail.width;\r\n  let xPosition = windowWidth / 2 - elementWidth / 2;\r\n  let yPosition = elementHeight / 2 - elementHeight / 2;\r\n\r\n  const svgns = \"http://www.w3.org/2000/svg\";\r\n  const svg = document.getElementsByTagName(\"svg\")[0];\r\n\r\n  const rotate = () => {\r\n    rotateSwitch = !rotateSwitch;\r\n    [detail.lt, detail.rt, detail.rb, detail.lb] = [\r\n      detail.lb,\r\n      detail.lt,\r\n      detail.rt,\r\n      detail.rb,\r\n    ];\r\n  };\r\n\r\n  const positionCheck = () => {\r\n    if (rotateSwitch === true) {\r\n      elementWidth = detail.length;\r\n      elementHeight = detail.width;\r\n    }\r\n    if (rotateSwitch === false) {\r\n      elementWidth = detail.width;\r\n      elementHeight = detail.length;\r\n    }\r\n  };\r\n\r\n  const updateSvgDimentions = () => {\r\n    windowWidth = window.innerWidth;\r\n    svg.style.width = `${windowWidth}px`;\r\n    // svg.style.height = `${elementHeight + 20}px`;\r\n    svg.style.height = `${fixedHeight}px`;\r\n    xPosition = windowWidth / 2 - elementWidth / 2;\r\n    yPosition = fixedHeight / 2 - elementHeight / 2;\r\n  };\r\n  updateSvgDimentions();\r\n\r\n  const updateData = () => {\r\n    if (\r\n      Number.isNaN(detail.length) ||\r\n      Number.isNaN(detail.width) ||\r\n      Number.isNaN(detail.rt.radius) ||\r\n      Number.isNaN(detail.lt.radius) ||\r\n      Number.isNaN(detail.rb.radius) ||\r\n      Number.isNaN(detail.lb.radius)\r\n    ) {\r\n      return (svg.innerHTML = `<text class=\"svg-text\" x=\"$10\" y=\"375\"   font-size=\"50\" fill=\"white\">Input data is uncorrect.</text>\r\n      <text class=\"svg-text\" x=\"$10\" y=\"425\"  font-size=\"35\" fill=\"white\">Input data shoud contain only.</text>`);\r\n    }\r\n    if (detail.length > maxElementSize || detail.width > maxElementSize) {\r\n      return (svg.innerHTML = `<text class=\"svg-text\" x=\"$10\" y=\"375\"   font-size=\"50\" fill=\"white\">Input data is uncorrect.</text>\r\n      <text class=\"svg-text\" x=\"$10\" y=\"425\"  font-size=\"35\" fill=\"white\">Max height = ${maxElementSize}, Max width = ${maxElementSize}.</text>`);\r\n    }\r\n    if (\r\n      detail.rt.radius > elementWidth / 2 ||\r\n      detail.lt.radius > elementWidth / 2 ||\r\n      detail.rb.radius > elementWidth / 2 ||\r\n      detail.lb.radius > elementWidth / 2 ||\r\n      detail.rt.radius > elementHeight / 2 ||\r\n      detail.lt.radius > elementHeight / 2 ||\r\n      detail.rb.radius > elementHeight / 2 ||\r\n      detail.lb.radius > elementHeight / 2\r\n    ) {\r\n      return (svg.innerHTML = `<text class=\"svg-text\" x=\"$10\"  y=\"375\"   font-size=\"50\">Input data is uncorrect.</text>\r\n      <text class=\"svg-text\" x=\"$10\" y=\"425\"  font-size=\"20\">Element radius can not be biger than half of the rectangle side.</text>`);\r\n    }\r\n\r\n    const rect = document.createElementNS(svgns, \"path\");\r\n    const pathDataValue = generatePathData(\r\n      xPosition,\r\n      yPosition,\r\n      elementWidth,\r\n      elementHeight,\r\n      detail.rt.radius,\r\n      detail.rb.radius,\r\n      detail.lb.radius,\r\n      detail.lt.radius\r\n    );\r\n    rect.setAttributeNS(null, \"d\", pathDataValue);\r\n\r\n    svg.innerHTML = \"\";\r\n    svg.appendChild(rect);\r\n  };\r\n\r\n  const arcParameter = (\r\n    rx,\r\n    ry,\r\n    xAxisRotation,\r\n    largeArcFlag,\r\n    sweepFlag,\r\n    x,\r\n    y\r\n  ) => {\r\n    return [\r\n      rx,\r\n      \",\",\r\n      ry,\r\n      \" \",\r\n      xAxisRotation,\r\n      \" \",\r\n      largeArcFlag,\r\n      \",\",\r\n      sweepFlag,\r\n      \" \",\r\n      x,\r\n      \",\",\r\n      y,\r\n    ].join(\"\");\r\n  };\r\n\r\n  const generatePathData = (x, y, width, height, rt, rb, lb, lt) => {\r\n    let data = [];\r\n    data.push(\"M\" + (x + width / 2) + \",\" + y);\r\n    data.push(\"H\" + (x + width - rt));\r\n    if (rt > 0) {\r\n      data.push(\"A\" + arcParameter(rt, rt, 0, 0, 1, x + width, y + rt));\r\n    }\r\n    data.push(\"V\" + (y + height - rb));\r\n    if (rb > 0) {\r\n      data.push(\r\n        \"A\" + arcParameter(rb, rb, 0, 0, 1, x + width - rb, y + height)\r\n      );\r\n    }\r\n    data.push(\"H\" + (x + lb));\r\n    if (lb > 0) {\r\n      data.push(\"A\" + arcParameter(lb, lb, 0, 0, 1, x + 0, y + height - lb));\r\n    }\r\n    data.push(\"V\" + (y + lt));\r\n    if (lt > 0) {\r\n      data.push(\"A\" + arcParameter(lt, lt, 0, 0, 1, x + lt, y + 0));\r\n    }\r\n    data.push(\"Z\");\r\n    return data.join(\" \");\r\n  };\r\n  updateData();\r\n\r\n  window.addEventListener(\"resize\", () => {\r\n    positionCheck();\r\n    updateSvgDimentions();\r\n    updateData();\r\n  });\r\n\r\n  rotateZ.addEventListener(\"click\", () => {\r\n    rotate();\r\n    positionCheck();\r\n    updateSvgDimentions();\r\n    updateData();\r\n  });\r\n\r\n  heightInput.addEventListener(\"input\", (e) => {\r\n    detail.length = Number(e.target.value);\r\n    positionCheck();\r\n    updateSvgDimentions();\r\n    updateData();\r\n  });\r\n\r\n  widthInput.addEventListener(\"input\", (e) => {\r\n    detail.width = Number(e.target.value);\r\n    positionCheck();\r\n    updateSvgDimentions();\r\n    updateData();\r\n  });\r\n\r\n  rightAngleInput.addEventListener(\"input\", (e) => {\r\n    detail.rt.radius = Number(e.target.value);\r\n    positionCheck();\r\n    updateSvgDimentions();\r\n    updateData();\r\n  });\r\n}\r\n"]}